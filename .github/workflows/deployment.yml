name: Deployment TF

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1


      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}


      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0 # You can specify the Terraform version you're using

      - name: Initialize Terraform
        env:
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: terraform init -migrate-state -lock-timeout=5m

      - name: Check if ECR Repository exists, then import or create
        run: |
          REPO_NAME="fastapi-server"
          RESOURCE_NAME="aws_ecr_repository.api"
      
          # Check if the resource is already managed by Terraform
          if terraform state list | grep -q "$RESOURCE_NAME"; then
            echo "Resource is already managed by Terraform."
          else
            # Check if the repository exists in AWS
            REPO_CHECK=$(aws ecr describe-repositories --repository-names $REPO_NAME 2>&1 || true)
            
            if [[ $REPO_CHECK == *"RepositoryNotFoundException"* ]]; then
              echo "Repository does not exist, creating it..."
              terraform apply -target=$RESOURCE_NAME -auto-approve
            else
              echo "Repository exists, importing into Terraform..."
              terraform import $RESOURCE_NAME $REPO_NAME
            fi
          fi

      - name: Plan Terraform changes
        env:
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
          TF_VAR_aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          TF_VAR_aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          TF_VAR_aws_region: ${{ secrets.AWS_DEFAULT_REGION }}
        run: terraform plan -out=tfplan

      - name: Apply Terraform changes
        env:
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        if: github.ref == 'refs/heads/main'
        run: terraform apply -auto-approve tfplan


      - name: Log in to Amazon ECR
        id: ecr-login
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_DEFAULT_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com

      - name: Gerar .env  
        run: |
          cat <<EOF > .env
          MONGODB_URL=${{ secrets.MONGODB_URL }}
          MERCADO_PAGO_TOKEN=${{ secrets.MERCADO_PAGO_TOKEN }}
          EOF

      - name: Build, tag, and push Docker imagx
        run: |
          docker build --platform linux/amd64 -t ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com/fastapi-server:latest .
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com/fastapi-server:latest 


      - name: Run Terraform apply to update image
        env:
            AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: terraform apply -auto-approve

      - name: Check if EKS Cluster exists, then create if not
        run: |
          CLUSTER_NAME="fastapi-cluster"
          CLUSTER_CHECK=$(aws eks describe-cluster --name $CLUSTER_NAME --region ${{ secrets.AWS_DEFAULT_REGION }} 2>&1 || true)

          if [[ $CLUSTER_CHECK == *"ResourceNotFoundException"* ]]; then
            echo "Cluster does not exist, creating it..."
            terraform state rm aws_eks_cluster.fastapi-cluster
            terraform apply -target=aws_eks_cluster.$CLUSTER_NAME -auto-approve
          else
            echo "Cluster exists."
          fi

      - name: Update Kubeconfig
        run: |
          aws eks update-kubeconfig --name fastapi-cluster --region ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Deploy to Kubernetes
        run: |
          cd infra
          sed -i "s/latest/${{ github.sha }}/g" deployment.yaml
          kubectl apply -f deployment.yaml --validate=false